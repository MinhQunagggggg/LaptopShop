/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package Controller;

import DAO.CartDAO;
import DAO.OrderDAO;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.util.List;
import model.CartItem;
import model.User;

/**
 *
 * @author CE182250
 */
@WebServlet(name = "ConfirmOrderServlet", urlPatterns = {"/ConfirmOrderServlet"})
public class ConfirmOrderServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        if (user == null) {
            System.out.println("‚ùå Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p!");
            response.sendRedirect(request.getContextPath() + "/Login");
            return;
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ form
        String customerName = request.getParameter("customerName");
        String shippingAddress = request.getParameter("shippingAddress");
        String phone = request.getParameter("phone");
        String paymentMethod = request.getParameter("paymentMethod");
        String[] selectedItems = request.getParameterValues("selectedItems");

        if (selectedItems == null || selectedItems.length == 0) {
            response.sendRedirect(request.getContextPath() + "/views/User/checkout.jsp");
            return;
        }

        List<CartItem> checkoutItems = (List<CartItem>) session.getAttribute("checkoutItems");
        if (checkoutItems == null || checkoutItems.isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/views/User/cart.jsp");
            return;
        }

        double totalAmount = (double) session.getAttribute("totalAmount");
        int userId = user.getId();
        OrderDAO orderDAO = new OrderDAO();
        CartDAO cartDAO = new CartDAO();

        try {
            System.out.println("üìå Debug: D·ªØ li·ªáu t·ª´ form checkout:");
            System.out.println("User ID: " + userId);
            System.out.println("T√™n: " + customerName + ", ƒê·ªãa ch·ªâ: " + shippingAddress + ", SƒêT: " + phone);
            System.out.println("Ph∆∞∆°ng th·ª©c thanh to√°n: " + paymentMethod);
            System.out.println("T·ªïng ti·ªÅn: " + totalAmount);

            // ‚úÖ T·∫°o ƒë∆°n h√†ng m·ªõi
            int orderId = orderDAO.createOrder(userId, customerName, shippingAddress, phone, totalAmount, paymentMethod);
            if (orderId <= 0) {
                System.out.println("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c ƒë∆°n h√†ng!");
                response.sendRedirect(request.getContextPath() + "/views/User/checkout.jsp?error=order-failed");
                return;
            }
            System.out.println("‚úÖ ƒê∆°n h√†ng ƒë√£ t·∫°o v·ªõi ID: " + orderId);

            // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≥ v∆∞·ª£t qu√° t·ªìn kho kh√¥ng
            for (CartItem item : checkoutItems) {
                int stock = cartDAO.getStockForVariant(item.getVariantId());
                int quantity = Integer.parseInt(request.getParameter("quantity_" + item.getVariantId()));

                if (quantity > stock) {
                    System.out.println("‚ùå L·ªói: S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho! VariantID: " + item.getVariantId() + " | Stock: " + stock + " | Requested: " + quantity);
                    response.sendRedirect(request.getContextPath() + "/views/User/checkout.jsp?error=out-of-stock");
                    return;
                }
            }

            // ‚úÖ L∆∞u t·∫•t c·∫£ s·∫£n ph·∫©m v√†o b·∫£ng OrderDetails v√† tr·ª´ t·ªìn kho
            for (CartItem item : checkoutItems) {
                int quantity = Integer.parseInt(request.getParameter("quantity_" + item.getVariantId()));
                orderDAO.addOrderDetail(orderId, item.getVariantId(), quantity, item.getPrice());
                cartDAO.updateStockAfterPurchase(item.getVariantId(), quantity);
                System.out.println("‚úÖ ƒê√£ th√™m v√†o OrderDetails: OrderID = " + orderId + ", VariantID = " + item.getVariantId() + ", Quantity = " + quantity);
            }

            // ‚úÖ X√≥a s·∫£n ph·∫©m ƒë√£ mua kh·ªèi gi·ªè h√†ng
            cartDAO.updateCartAfterCheckout(userId, checkoutItems);

           if ("VNPay".equals(paymentMethod)) {
    System.out.println("‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPay.");

    // ‚úÖ Ki·ªÉm tra `orderId` v√† `totalAmount` c√≥ gi√° tr·ªã h·ª£p l·ªá kh√¥ng
    if (orderId <= 0 || totalAmount <= 0) {
        System.out.println("‚ùå L·ªói: orderId ho·∫∑c totalAmount kh√¥ng h·ª£p l·ªá!");
        session.setAttribute("paymentError", "L·ªói thanh to√°n: Th√¥ng tin ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá.");
        response.sendRedirect(request.getContextPath() + "/views/User/checkout.jsp");
        return;
    }

    // ‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPay v·ªõi ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
    String vnPayRedirectUrl = request.getContextPath() + "/VNPayPayment?orderId=" + orderId + "&amount=" + (int) totalAmount;
    System.out.println("‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn: " + vnPayRedirectUrl);
    response.sendRedirect(vnPayRedirectUrl);
    return; // üî• D·ª´ng x·ª≠ l√Ω ti·∫øp n·∫øu d√πng VNPay
}


  



            // ‚úÖ L∆∞u th√¥ng tin ƒë∆°n h√†ng v√†o session ƒë·ªÉ hi·ªÉn th·ªã tr√™n trang x√°c nh·∫≠n
            session.setAttribute("orderId", orderId);
            session.setAttribute("orderTotal", totalAmount);
            session.setAttribute("orderDetails", checkoutItems);
            session.removeAttribute("checkoutItems");
            session.removeAttribute("totalAmount");

            // ‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang x√°c nh·∫≠n ƒë∆°n h√†ng
            System.out.println("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë·∫∑t th√†nh c√¥ng!");
            response.sendRedirect(request.getContextPath() + "/views/User/order-confirmation.jsp");

        } catch (Exception e) {
            System.out.println("‚ùå L·ªñI TO√ÄN B·ªò QU√Å TR√åNH:");
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/views/User/checkout.jsp?error=order-failed");
        }
    }
}
